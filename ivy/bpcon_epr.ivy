#lang ivy1.6

# total ordering
module total_order(r) = {
    axiom r(X, X)                       # reflexivity
    axiom r(X, Y) & r(Y, Z) -> r(X, Z)  # transitivity
    axiom r(X, Y) & r(Y, X) -> X = Y    # antisymmetry
    axiom r(X, Y) | r(Y, X)             # totality
}

type node
type learner
type value
type round
type byzquorum
type weakquorum

individual none: round
relation le(X : round, Y : round)
instantiate total_order(le)

relation lt(X : round, Y : round)
axiom [lt] lt(X, Y) <-> ~le(Y, X)

axiom [le_none] le(none, R)


############## Acceptors and quorums

relation real(N : node) # real acceptors

relation bqmember(N : node, Q : byzquorum)
relation wqmember(N : node, Q : weakquorum)

axiom [byzquorum]
    forall BQ1 : byzquorum, BQ2 : byzquorum.
        exists N : node. bqmember(N, BQ1) & bqmember(N, BQ2) & real(N)

axiom [weakquorum]
    forall WQ : weakquorum.
        exists N : node. wqmember(N, WQ) & real(N)

#conjecture [byzquorum_is_a_weakquorum]
#    forall BQ : byzquorum.
#        exists N : node. bqmember(N, BQ) & real(N)


############## Messages

# 1a message sent in round R
relation one_a(R : round)

# 1b messages sent by node N in round R
relation one_b_max_vote(N : node, R : round, RMAX : round, V : value, RAV : round, VAV : value)

# known 1b messages received by node N0
relation known_one_b_max_vote(N0 : node, N : node, R : round, RMAX : round, V : value, RAV : round, VAV : value)

# 1c messages serving for value announcement
relation one_c_announced_value(R : round, V : value)

# 2av messages sent by node N in round R
relation two_av(N : node, R : round, V : value)

# voted values, 2b messages
relation two_b_vote(N : node, R : round, V : value)

# decided values: got 2b by from a quorum
relation decision(L : learner, R : round, V : value)


############## Instrumentation relations

relation one_b(N : node, R : round)
    # := exists RMAX : round, V : value, RAV : round, VAV : value.
    #        one_b_max_vote(N, R, RMAX, V, RAV, VAV)

relation left_rnd(N : node, R : round)
    # := (exists R1 : round, RMAX : round, V : value, RAV : round, VAV : value.
    #        one_b_max_vote(N, R1, RMAX, V, RAV, VAV) & lt(R, R1))

relation safety_proof_for_value(N : node, R : round, RAV : round, VAV : value)
    # := exists RMAX : round, V : value.
    #        known_one_b_max_vote(N, R, RMAX, V, RAV, VAV) # & lt(RPROOF, RAV)
    # intended meaning:
    # in round R, there exists a 1b message from node N such that it contained a proof of safety
    # for value VAV sent in round RAV

relation known_safety_proof_for_value(SELF : node, N : node, R : round, RAV : round, VAV : value)
    # := exists RMAX : round, V : value, RAV : round.
    #        known_one_b_max_vote(SELF, N, R, RMAX, V, RAV, VAV) # & lt(RPROOF, RAV)
    # intended meaning:
    # node SELF has received in round R a 1b message from node N such that it contained a proof
    # for value VAV sent in round RAV



############## Initial state

init ~one_a(R)
init ~one_b_max_vote(N, R, RMAX, V, RAV, VAV)
init ~known_one_b_max_vote(N0, N, R, RMAX, V, RAV, VAV)
init ~one_c_announced_value(R, V)
init ~two_av(N, R, V)
init ~two_b_vote(N, R, V)
init ~decision(L, R, V)

init ~one_b(N, R)
init ~left_rnd(N, R)
init ~safety_proof_for_value(N, R, RAV, V)
init ~known_safety_proof_for_value(SELF, N, R, RAV, V)


############## Actions

action init_round_1a = {
    # a proposer selects a round and sends a message asking nodes to join the round
    # a fake proposer can always start a new round
    local r : round {
        assume r ~= none;
        one_a(r) := true
    }
}

action join_round_1b = {
    # acceptor receives 1a message and answer with 1b message
    local self : node, r : round {
        assume real(self);
        assume r ~= none;
        assume one_a(r);
        assume ~left_rnd(self, r);

        local maxr : round, v : value, rav : round, vav : value {
            # find the maximal vote in a round less than r
            assume
                (maxr = none &
                 forall MAXR : round, V : value.
                    two_b_vote(self, MAXR, V) -> le(r, MAXR)) |
                (maxr ~= none & lt(maxr, r) & two_b_vote(self, maxr, v) &
                 (forall MAXR : round, V : value.
                    lt(MAXR, r) & two_b_vote(self, MAXR, V) -> le(MAXR, maxr)) &
                 # if the node has voted in a previous round and the 2av history is not empty,
                 # pick any entry in the 2av history
                 ((rav = none &
                   forall RAV : round, VAV : value.
                    two_av(self, RAV, VAV) -> le(r, RAV)) |
                  (rav ~= none & two_av(self, rav, vav) & lt(rav, r) &
                   forall RAV : round.
                    two_av(self, RAV, vav) -> le(RAV, rav)))
                );
            # prevent sending a message for a different pair (maxr, v) -- not necessary
            # assume one_b_max_vote(self, r, MAXR, V, RAV, VAV) -> MAXR = maxr & V = v;
            # send a 1b message
            one_b_max_vote(self, r, maxr, v, rav, vav) := true;
            # instrumentation
            one_b(self, r) := true;
            left_rnd(self, R) := left_rnd(self, R) | lt(R, r);
            if maxr ~= none & rav ~= none {
                safety_proof_for_value(self, r, rav, vav) := true
            }
        }
    }
}

action join_round_1b_fake = {
    local self : node, r : round {
        assume ~real(self);
        assume r ~= none;
        local maxr : round, v : value, rav : round, vav : value {
            assume rav ~= none;
            one_b_max_vote(self, r, maxr, v, rav, vav) := true
        }
    }
}

# receive 1b packet and write it into local log
action receive_1b = {
    local self : node {
        assume real(self);
        local n : node, r : round, maxr : round, v : value, rav : round, vav : value {
            assume one_b_max_vote(n, r, maxr, v, rav, vav);
            known_one_b_max_vote(self, n, r, maxr, v, rav, vav) := true;
            known_safety_proof_for_value(self, n, r, RAV, vav) := safety_proof_for_value(n, r, RAV, vav)
        }
    }
}

# announce any value
action announce_value_1c = {
    local r : round, v : value {
        assume r ~= none;
        one_c_announced_value(r, v) := true
    }
}

# send 2av
action send_2av = {
    local self : node, r : round {
        assume real(self);
        assume r ~= none;
        assume ~left_rnd(self, r);
        assume ~two_av(self, r, V);

        local bq : byzquorum, wq : weakquorum, rav : round, sv : value {
            assume one_c_announced_value(r, sv);
            assume forall N : node. bqmember(N, bq) -> one_b(N, r);
            assume
                # BP3a
                (
                 rav = none &
                 forall N : node, MAXR : round, V : value.
                    bqmember(N, bq) & two_b_vote(N, MAXR, V) -> le(r, MAXR)
                ) |
                # BP3c
                (
                 rav ~= none &
                 lt(rav, r) & # formally, we do not need this condition
                 # (a)
                 (
                  forall N : node, R1 : round, V : value.
                    bqmember(N, bq) & two_b_vote(N, R1, V) & lt(R1, r) ->
                    le(R1, rav) # (i)
                    & (R1 = rav -> V = sv) # (ii)
                 ) &
                 # (b)
                 (
                  forall N : node.
                    wqmember(N, wq) ->
                    known_safety_proof_for_value(self, N, r, rav, sv)
                    # abbreviates:
                    # exists MAXR : round, V : value.
                    #     known_one_b_max_vote(self, N, r, MAXR, V, rav, sv)
                 )
                );
            two_av(self, r, sv) := true
        }
    }
}

action send_2av_fake = {
    local self : node, r : round, v : value {
        assume ~real(self);
        assume r ~= none;
        two_av(self, r, v) := true
    }
}

action cast_vote_2b = {
    local self : node, r : round {
        assume real(self);
        assume r ~= none;
        assume ~left_rnd(self, r);
        local v : value, bq : byzquorum {
            assume bqmember(N, bq) -> two_av(N, r, v);
            two_b_vote(self, r, v) := true
        }
    }
}

action cast_vote_2b_fake = {
    local self : node, r : round, v : value {
        assume ~real(self);
        assume r ~= none;
        two_b_vote(self, r, v) := true
    }
}

# learner decides on a value if received 2b from a byzquorum
action decide = {
    local l : learner, r : round, v : value, bq : byzquorum {
        assume r ~= none;
        assume bqmember(N, bq) -> two_b_vote(N, r, v);
        decision(l, r, v) := true
    }
}

export init_round_1a
export join_round_1b
export join_round_1b_fake
export receive_1b
export announce_value_1c
export send_2av
export send_2av_fake
export cast_vote_2b
export cast_vote_2b_fake
export decide


############## Invariants

# safety property
conjecture [safety]
    decision(L1, R1, V1) & decision(L2, R2, V2) -> V1 = V2

# decisions come from quorums of votes
conjecture [decision_byzquorum]
    forall R : round, V : value, L : learner.
        decision(L, R, V) ->
        exists Q : byzquorum.
            forall N : node. bqmember(N, Q) -> two_b_vote(N, R, V)

# 2b votes come from a byzquorum
conjecture
    forall N : node, R : round, V : value.
        real(N) & two_b_vote(N, R, V) ->
        exists BQ : byzquorum.
            forall N1 : node. bqmember(N1, BQ) -> two_av(N1, R, V)

# only vote for proposed values
conjecture
    forall N : node, R : round, V : value.
        real(N) & two_b_vote(N, R, V) ->
        exists BQ : byzquorum.
            forall N1 : node.
                bqmember(N1, BQ) -> two_av(N1, R, V)

# proposed values are safe
conjecture [2av_safe]
    forall N2 : node, R1 : round, R2 : round, V1 : value, V2 : value, BQ : byzquorum.
        real(N2) & two_av(N2, R2, V2) &
        lt(R1, R2) & V1 ~= V2 ->
        exists N1 : node.
            real(N1) & bqmember(N1, BQ) &
            left_rnd(N1, R1) & ~two_b_vote(N1, R1, V1)

# proposals are unique per round
conjecture [2av_unique]
    real(N) & two_av(N, R, V1) & two_av(N, R, V2) -> V1 = V2


# properties of one_a
conjecture real(N) & one_b(N, R) -> one_a(R)
conjecture real(N) & one_b_max_vote(N, R, RMAX, V, RAV, VAV) & RMAX ~= none -> one_a(RMAX)
conjecture real(N) & two_b_vote(N, R, V) -> one_a(R)
conjecture real(N) & two_av(N, R, V) -> one_a(R)
conjecture real(N) & known_one_b_max_vote(SELF, N, R, RMAX, V, RAV, VAV) -> one_a(R)


# properties on one_b
conjecture [1b_0]
    real(N) &
    one_b_max_vote(N, R, RMAX, V, RAV, VAV) -> one_b(N, R)

conjecture [1b_left]
    real(N) &
    one_b(N, R2) & lt(R1, R2) -> left_rnd(N, R1)


# properties of one_b_max_vote
conjecture [1b_1]
    real(N) &
    one_b_max_vote(N, R2, none, V1, RAV, VAV) & lt(R1, R2) ->
    ~two_b_vote(N, R1, V2)

conjecture [1b_2]
    real(N) &
    one_b_max_vote(N, R, RMAX, V, RAV, VAV) & RMAX ~= none ->
    lt(RMAX, R) & two_b_vote(N, RMAX, V)

conjecture [1b_3]
    real(N) &
    one_b_max_vote(N, R, RMAX, V, RAV, VAV) & RMAX ~= none &
    lt(RMAX, ROTHER) & lt(ROTHER, R) ->
    ~two_b_vote(N, ROTHER, VOTHER)

conjecture [1b_4]
    real(N) &
    one_b_max_vote(N, R, RMAX, V, RAV, VAV) & RMAX ~= none ->
    lt(RAV, R) & (RAV ~= none -> two_av(N, RAV, VAV))

# only true when we explicitely forbid sending a different (maxr, v) pair when join_round_1b is re-entered for the same round
#conjecture [1b_maxr_v]
#    real(N) &
#    one_b_max_vote(N, R, RMAX1, V1, RAV1, VAV1) &
#    one_b_max_vote(N, R, RMAX2, V2, RAV2, VAV2) ->
#    RMAX1 = RMAX2 & V1 = V2

conjecture [1b_rav_none]
    real(N) & RMAX ~= none &
    one_b_max_vote(N, R, RMAX, V, none, VAV1) &
    one_b_max_vote(N, R, RMAX, V, RAV2, VAV2) ->
    RAV2 = none


# properties of one_b_max_vote
conjecture [learned_1b_packets_exist]
    real(N0) &
    known_one_b_max_vote(N0, N, R, RMAX, V, RAV, VAV) ->
    one_b_max_vote(N, R, RMAX, V, RAV, VAV)

conjecture [1b_rav_none_1]
    real(N) & RMAX ~= none &
    one_b_max_vote(N, R, RMAX, V, none, VAV) &
    lt(RAV2, R) ->
    ~two_av(N, RAV2, VAV2)

conjecture [1b_safety_proof_for_value]
    real(N) & RMAX ~= none &
    one_b_max_vote(N, R, RMAX, V, none, VAV) &
    lt(RAV2, R) ->
    ~safety_proof_for_value(N, R, RAV2, VAV2)


# properties of left_rnd
conjecture [left_rnd_1]
    real(N) &
    one_b_max_vote(N, R, RMAX, V, RAV, VAV) & lt(R1, R) -> left_rnd(N, R1)

# only true if we do not allow to re-enter send_2av action when two_av in a higher round have been sent
#conjecture [left_rnd_2]
#    real(N) & two_av(N, R, V) & lt(R1, R) -> left_rnd(N, R1)


# properties of safety proofs
conjecture [learned_proofs]
    real(N0) & known_safety_proof_for_value(N0, N, R, RAV, VAV) ->
    safety_proof_for_value(N, R, RAV, VAV)

conjecture [safety_proof_for_value_1]
    real(N) & safety_proof_for_value(N, R, RAV, V) -> one_b(N, R)

conjecture [safety_proof_for_value_2]
    real(N) & safety_proof_for_value(N, R, RAV, V) -> two_av(N, RAV, V)


# properties of two_av
conjecture
    real(N) & two_av(N, R, V) -> one_c_announced_value(R, V)

conjecture [one_b_max_vote_valid]
    real(N) &
    one_b_max_vote(N, R, RMAX, V, RAV, VAV) &
    RMAX ~= none & RAV ~= none ->
    two_av(N, RAV, VAV)


# properties of none
conjecture ~one_a(none)
conjecture ~one_b_max_vote(N, none, MAXR, V, RAV, VAV)
conjecture ~known_one_b_max_vote(N0, N, none, R, V, RAV, VAV)
conjecture ~one_b(N, none)
conjecture ~one_c_announced_value(none, V)
conjecture ~two_av(N, none, V)
conjecture ~two_b_vote(N, none, V)
conjecture ~safety_proof_for_value(N, none, RPROOF, V)
conjecture ~safety_proof_for_value(N, R, none, V)
conjecture ~known_safety_proof_for_value(SELF, N, none, RAV, V)
conjecture ~known_safety_proof_for_value(SELF, N, R, none, V)


# restrict size of domain
#axiom exists V1. forall V : value. V = V1
#axiom exists V1, V2. forall V : value. V = V1 | V = V2
#axiom exists R1, R2, R3 . forall R : round. R = R1 | R = R2 | R = R3
#axiom exists R1, R2, R3, R4 . forall R : round. R = R1 | R = R2 | R = R3 | R = R4


