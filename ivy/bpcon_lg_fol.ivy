#lang ivy1.6

# total ordering
module total_order(r) = {
    axiom r(X,X)                        # reflexivity
    axiom r(X, Y) & r(Y, Z) -> r(X, Z)  # transitivity
    axiom r(X, Y) & r(Y, X) -> X = Y    # anti-symmetry
    axiom r(X, Y) | r(Y, X)             # totality
}

type node
type learner
type value
type round
type byzquorum
type weakquorum

individual none: round
relation le(X : round, Y : round)
instantiate total_order(le)

relation lt(X : round, Y : round)
axiom [lt] lt(X, Y) <-> ~le(Y, X)

axiom [le_none] le(none, R)


############## Learner graph

relation trust_live(L : learner, bq : byzquorum)
relation safe(L1 : learner, L2 : learner, bq : byzquorum)

axiom [safe_sym]
    safe(L1, L2, BQ) -> safe(L2, L1, BQ)

# valid learner graph
axiom [learner_graph_is_valid]
    forall L1 : learner, L2 : learner, BQ1 : byzquorum, BQ2 : byzquorum, S : byzquorum.
        trust_live(L1, BQ1) & trust_live(L2, BQ2) & safe(L1, L2, S) ->
        exists N : node.
            bqmember(N, BQ1) & bqmember(N, BQ2) & bqmember(N, S)

# condensed learner graph
axiom [learner_graph_is_condensed] 
    safe(L1, L2, S) & safe(L2, L3, S) -> safe(L1, L3, S)

# entanglement
relation ent(L1 : learner, L2 : learner, S : byzquorum)

axiom forall L1 : learner, L2 : learner.
        ent(L1, L2, S) -> (safe(L1, L2, S) & forall N : node. bqmember(N, S) -> real(N))
#axiom
#    forall L1 : learner, L2 : learner.
#        ent(L1, L2, S) <-> forall N : node. safe(L1, L2, S) & bqmember(N, S) -> real(N)


############## Acceptors and quorums

relation real(N : node) # real acceptors

relation bqmember(N : node, Q : byzquorum)
relation wqmember(N : node, Q : weakquorum)

axiom [byzquorum]
    forall BQ1 : byzquorum, BQ2 : byzquorum.
        exists N : node. bqmember(N, BQ1) & bqmember(N, BQ2) & real(N)
axiom [weakquorum]
    forall WQ : weakquorum.
        exists N : node. wqmember(N, WQ) & real(N)

#conjecture [byzquorum_is_a_weakquorum]
#    forall BQ : byzquorum.
#        exists N : node. bqmember(N, BQ) & real(N)


############## Messages

# 1a message sent in round R
relation one_a(L : learner, R : round)

# 1b messages sent by node N in round R
relation one_b_max_vote(L : learner, N : node, R : round, RMAX : round, V : value, RAV : round, VAV : value)

# known 1b messages received by node N0
relation known_one_b_max_vote(N0 : node, L : learner, N : node, R : round, RMAX : round, V : value, RAV : round, VAV : value)

# 1c messages serving for value announcement
relation one_c_announced_value(L : learner, R : round, V : value)

# 2av messages sent by node N in round R
relation two_av(L : learner, N : node, R : round, V : value)

# voted values, 2b messages
relation two_b_vote(L : learner, N : node, R : round, V : value)

# decided values: got 2b by from a quorum
relation decision(L : learner, R : round, V : value)


############## Initial state

init ~one_a(L, R)
init ~one_b_max_vote(L, N, R, RMAX, V, RAV, VAV)
init ~known_one_b_max_vote(N0, L, N, R, RMAX, V, RAV, VAV)
init ~one_c_announced_value(L, R, V)
init ~two_av(L, N, R, V)
init ~two_b_vote(L, N, R, V)
init ~decision(L, R, V)


############## Actions

action init_round_1a = {
    # a proposer selects a round and sends a message asking nodes to join the round
    # a fake proposer can always start a new round
    local l : learner, r : round {
        assume r ~= none;
        one_a(l, r) := true
    }
}

action join_round_1b = {
    # acceptor receives 1a message and answer with 1b message
    local l : learner, self : node, r : round {
        assume real(self);
        assume r ~= none;
        assume one_a(l, r);
        assume ~(R : round, RMAX : round, V : value, RAV : round, VAV : value.
                    one_b_max_vote(l, self, R, RMAX, V, RAV, VAV) & lt(r, R));
               #& ~(exists R : round, V : value. two_av(L, self, R, V) & lt(r, R)); # TODO
               # AK: allow re-entry for the action, since we want to allow
               # only one 2av message from self's log to be sent at a time.

        local maxr : round, v : value, rav : round, vav : value, lmax : learner, lav : learner {
            # find the maximal vote in a round less than r
            assume
                (maxr = none &
                 forall MAXR : round, V : value, L : learner.
                    two_b_vote(L, self, MAXR, V) -> le(r, MAXR)) |
                (maxr ~= none & lt(maxr, r) & two_b_vote(lmax, self, maxr, v) &
                 (forall MAXR : round, V : value, L : learner.
                    lt(MAXR, r) & two_b_vote(L, self, MAXR, V) -> le(MAXR, maxr)) &
                 # if the node has voted in a previous round and the 2av history is not empty,
                 # pick any entry in the 2av history
                 ((rav = none &
                   forall RAV : round, VAV : value, L : learner.
                    two_av(L, self, RAV, VAV) -> le(r, RAV)) |
                  (rav ~= none & two_av(lav, self, rav, vav) & lt(rav, r) &
                   forall RAV : round, L : learner.
                    two_av(L, self, RAV, vav) -> le(RAV, rav)))
                );
            # prevent sending a message for a different pair (maxr, v)
            assume one_b_max_vote(l, self, r, MAXR, V, RAV, VAV) -> MAXR = maxr & V = v;
            # send a 1b message
            one_b_max_vote(l, self, r, maxr, v, rav, vav) := true
        }
    }
}

action join_round_1b_fake = {
    local l : learner, self : node, r : round {
        assume ~real(self);
        assume r ~= none;
        local maxr : round, v : value, rav : round, vav : value {
            assume rav ~= none;
            one_b_max_vote(l, self, r, maxr, v, rav, vav) := true
        }
    }
}

# receive 1b packet and write it into local log
action receive_1b = {
    local self : node {
        assume real(self);
        local l : learner, n : node, r : round, maxr : round, v : value, rav : round, vav : value {
            assume one_b_max_vote(l, n, r, maxr, v, rav, vav);
            known_one_b_max_vote(self, l, n, r, maxr, v, rav, vav) := true
        }
    }
}

# announce any value
action announce_value_1c = {
    local l : learner, r : round, v : value {
        assume r ~= none;
        one_c_announced_value(l, r, v) := true
    }
}

# send 2av
action send_2av = {
    local l : learner, self : node, r : round {
        assume real(self);
        assume r ~= none;
        assume ~(exists L : learner, R : round, RMAX : round, V : value, RAV : round, VAV : value.
                    one_b_max_vote(L, self, R, RMAX, V, RAV, VAV) & lt(r, R));
               # & ~(exists L : learner, R : round, V : value. two_av(L, N, R, V) & lt(r, R));
        assume ~two_av(l, self, r, V);

        local bq : byzquorum, bq_weak : byzquorum, maxr : round, sv : value, lmax : learner {
            assume one_c_announced_value(l, r, sv);
            assume trust_live(l, bq);
            assume trust_live(l, bq_weak);
            assume
                forall N : node.
                    bqmember(N, bq) ->
                    exists MAXR : round, V : value, RAV : round, VAV : value.
                        known_one_b_max_vote(self, l, N, r, MAXR, V, RAV, VAV);
            assume
                # BP3a
                (maxr = none &
                 forall L : learner, N : node, MAXR : round, V : value, RAV : round, VAV : value.
                    bqmember(N, bq) & known_one_b_max_vote(self, L, N, r, MAXR, V, RAV, VAV) ->
                    MAXR = none
                ) |
                # BP3c
                (maxr ~= none & lt(maxr, r) & # TODO
                 # (a)
                 (forall L : learner, N : node, MAXR : round, V : value, RAV : round, VAV : value.
                    bqmember(N, bq) & known_one_b_max_vote(self, L, N, r, MAXR, V, RAV, VAV) ->
                    le(MAXR, maxr) & # (i)
                    (MAXR = maxr -> V = sv) # (ii)
                 ) &
                 # (b)
                 (forall N : node.
                    bqmember(N, bq_weak) ->
                    exists MAXR : round, V : value.
                        known_one_b_max_vote(self, l, N, r, MAXR, V, maxr, sv)
                 ));
            two_av(l, self, r, sv) := true
        }
    }
}

action send_2av_fake = {
    local l : learner, self : node, r : round, v : value {
        assume ~real(self);
        assume r ~= none;
        two_av(l, self, r, v) := true
    }
}

action cast_vote_2b = {
    local l : learner, self : node, r : round {
        assume real(self);
        assume r ~= none;
        assume ~(exists R : round, RMAX : round, V : value, RAV : round, VAV : value.
                    one_b_max_vote(self, R, RMAX, V, RAV, VAV) & lt(r, R));
               # & ~(exists R : round, V : value. two_av(N, R, V) & lt(r, R));
        local v : value, bq : byzquorum {
            assume trust_live(l, bq);
            assume bqmember(N, bq) -> two_av(N, r, v);
            two_b_vote(l, self, r, v) := true
        }
    }
}

action cast_vote_2b_fake = {
    local l : learner, self : node, r : round, v : value {
        assume ~real(self);
        assume r ~= none;
        two_b_vote(l, self, r, v) := true
    }
}

# learner decides on a value if received 2b from a byzquorum
action decide = {
    local l : learner, r : round, v : value, bq : byzquorum {
        assume r ~= none;
        assume trust_live(l, bq);
        assume bqmember(N, bq) -> two_b_vote(l, N, r, v);
        decision(l, r, v) := true
    }
}

export init_round_1a
export join_round_1b
export join_round_1b_fake
export receive_1b
export announce_value_1c
export send_2av
export send_2av_fake
export cast_vote_2b
export cast_vote_2b_fake
export decide


# safety property
conjecture [safety]
    ent(L1, L2, S) & decision(L1, R1, V1) & decision(L2, R2, V2) -> V1 = V2

